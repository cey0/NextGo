package db

import (
	"api/pkg/models"
	"database/sql"
	"fmt"
	"io/ioutil"

	"github.com/go-gorp/gorp"
	_ "github.com/lib/pq" // PostgreSQL driver
	"gopkg.in/yaml.v2"
)

// DB represents the database connection
var DB *gorp.DbMap

type Config struct {
	Database struct {
		Host     string `yaml:"host"`
		Port     string `yaml:"port"`
		User     string `yaml:"user"`
		Password string `yaml:"password"`
		Name     string `yaml:"name"`
	} `yaml:"database"`
}

// RegisterModels registers all the models in the DbMap
func RegisterModels(dbmap *gorp.DbMap) {
	// Register the Book model
	dbmap.AddTableWithName(models.Book{}, "books").SetKeys(true, "ID")
}

// LoadConfig loads configuration from a YAML file
func LoadConfig(filename string) (*Config, error) {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("error reading config file: %w", err)
	}

	var config Config
	if err = yaml.Unmarshal(data, &config); err != nil {
		return nil, fmt.Errorf("error unmarshaling config: %w", err)
	}

	return &config, nil
}

// InitDB initializes the Gorp database connection and registers models
func InitDB(configFile string) error {
	// Load the configuration
	config, err := LoadConfig(configFile)
	if err != nil {
		return err
	}

	// Data Source Name (DSN)
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		config.Database.Host, config.Database.Port, config.Database.User, config.Database.Password, config.Database.Name)

	// Open the database connection
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		return fmt.Errorf("error connecting to database: %w", err)
	}

	// Create a DbMap using gorp
	DB = &gorp.DbMap{Db: db, Dialect: gorp.PostgresDialect{}}

	// Register models with the DB map
	RegisterModels(DB)

	// Create tables if they don't exist
	err = DB.CreateTablesIfNotExists()
	if err != nil {
		return fmt.Errorf("error creating tables: %w", err)
	}

	// Verify the connection
	if err = db.Ping(); err != nil {
		return fmt.Errorf("error pinging database: %w", err)
	}

	fmt.Println("Database connection established with Gorp")
	return nil
}

// CloseDB closes the database connection
func CloseDB() {
	if DB != nil && DB.Db != nil {
		if err := DB.Db.Close(); err != nil {
			fmt.Printf("Error closing database: %v\n", err)
		} else {
			fmt.Println("Database connection closed")
		}
	}
}
